---
- name: Deploy JS App to AWS
  hosts: aws
  become: yes
  remote_user: ubuntu
  vars:
    app_name: simple-js-app
    app_port: 3000
    app_user: ubuntu
    app_dir: "/home/{{ app_user }}/{{ app_name }}"

  tasks:
    # üê≥ Install Docker
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Ensure Docker service is running and enabled
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add ubuntu user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    - name: Ensure app directory exists
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Sync application files (excluding node_modules)
      synchronize:
        src: "{{ playbook_dir }}/../../app/"
        dest: "/home/ubuntu/simple-js-app/"
        recursive: yes
        delete: no
        rsync_opts:
          - "--exclude=node_modules"
        ssh_args: "-i /home/mali/Desktop/DevOpsLearning/DevOps.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      delegate_to: localhost
      become: false
      
    - name: Copy Dockerfile
      copy:
        src: "{{ playbook_dir }}/../../Dockerfile"
        dest: "{{ app_dir }}/Dockerfile"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    - name: Copy .dockerignore
      copy:
        src: "{{ playbook_dir }}/../../.dockerignore"
        dest: "{{ app_dir }}/.dockerignore"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    - name: Build Docker image
      community.docker.docker_image: # Use the fully qualified collection name
        name: "{{ app_name }}"
        build:
          path: "{{ app_dir }}"
          dockerfile: Dockerfile
        state: present
        source: build

    - name: Stop existing container
      community.docker.docker_container: # Use the fully qualified collection name
        name: "{{ app_name }}"
        state: absent
      ignore_errors: yes

    - name: Run Docker container
      community.docker.docker_container: # Use the fully qualified collection name
        name: "{{ app_name }}"
        image: "{{ app_name }}"
        state: started
        restart_policy: always
        ports:
          - "{{ app_port }}:3000"
