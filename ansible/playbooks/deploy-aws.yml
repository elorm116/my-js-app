---
- name: Deploy JS App to AWS
  hosts: aws
  become: true
  remote_user: ubuntu

  vars:
    app_name: simple-js-app
    app_port: 3000
    app_user: ubuntu
    app_dir: "/home/{{ app_user }}/{{ app_name }}"

  tasks:
    # üê≥ Comprehensive Docker Installation
    - name: Update apt cache and install necessary packages for Docker
      ansible.builtin.apt:
        update_cache: yes
        pkg:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        cache_valid_time: 3600

    - name: Create Docker GPG directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG apt key
      ansible.builtin.shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker apt repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        filename: docker.list

    - name: Install Docker Engine
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Ensure Docker service is running and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Add {{ app_user }} user to the docker group
      ansible.builtin.user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    - name: Reset connection to apply new group changes
      ansible.builtin.meta: reset_connection
      when: ansible_check_mode is not defined or not ansible_check_mode

    - name: Pause for a few seconds to ensure Docker is fully ready
      ansible.builtin.pause:
        seconds: 10

    # üìÇ Application Deployment
    - name: Ensure app directory exists
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Sync application files (excluding node_modules)
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/../../app/"
        dest: "{{ app_dir }}/"
        recursive: yes
        delete: no
        rsync_opts:
          - "--exclude=node_modules"
        ssh_args: "-i {{ playbook_dir }}/../../ansible/DevOps.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      delegate_to: localhost
      become: false

    - name: Copy Dockerfile
      ansible.builtin.copy:
        src: "Dockerfile" # Corrected path: relative to Jenkins workspace root
        dest: "{{ app_dir }}/Dockerfile"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    - name: Copy .dockerignore
      ansible.builtin.copy:
        src: ".dockerignore" # Corrected path: relative to Jenkins workspace root
        dest: "{{ app_dir }}/.dockerignore"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    - name: Build Docker image
      community.docker.docker_image:
        name: "{{ app_name }}"
        build:
          path: "{{ app_dir }}"
          dockerfile: Dockerfile
        state: present
        source: build

    - name: Stop existing container
      community.docker.docker_container:
        name: "{{ app_name }}"
        state: absent
      ignore_errors: yes

    - name: Run Docker container
      community.docker.docker_container:
        name: "{{ app_name }}"
        image: "{{ app_name }}"
        state: started
        restart_policy: always
        ports:
          - "{{ app_port }}:3000"
